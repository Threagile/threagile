/*
Copyright Â© 2023 NAME HERE <EMAIL ADDRESS>
*/

package types

import (
	"encoding/json"
	"fmt"
	"strings"

	"github.com/goccy/go-yaml"
)

type RiskExploitationLikelihood int

const (
	Unlikely RiskExploitationLikelihood = iota
	Likely
	VeryLikely
	Frequent
)

func RiskExploitationLikelihoodValues() []TypeEnum {
	return []TypeEnum{
		Unlikely,
		Likely,
		VeryLikely,
		Frequent,
	}
}

var RiskExploitationLikelihoodTypeDescription = [...]TypeDescription{
	{"unlikely", "Unlikely"},
	{"likely", "Likely"},
	{"very-likely", "Very-Likely"},
	{"frequent", "Frequent"},
}

func ParseRiskExploitationLikelihood(value string) (riskExploitationLikelihood RiskExploitationLikelihood, err error) {
	return RiskExploitationLikelihood(0).Find(value)
}

func (what RiskExploitationLikelihood) String() string {
	// NOTE: maintain list also in schema.json for validation in IDEs
	return RiskExploitationLikelihoodTypeDescription[what].Name
}

func (what RiskExploitationLikelihood) Explain() string {
	return RiskExploitationLikelihoodTypeDescription[what].Description
}

func (what RiskExploitationLikelihood) Title() string {
	return [...]string{"Unlikely", "Likely", "Very Likely", "Frequent"}[what]
}

func (what RiskExploitationLikelihood) Weight() int {
	return [...]int{1, 2, 3, 4}[what]
}

func (what RiskExploitationLikelihood) Find(value string) (RiskExploitationLikelihood, error) {
	if len(value) == 0 {
		return Likely, nil
	}

	for index, description := range RiskExploitationLikelihoodTypeDescription {
		if strings.EqualFold(value, description.Name) {
			return RiskExploitationLikelihood(index), nil
		}
	}

	return RiskExploitationLikelihood(0), fmt.Errorf("unknown risk exploration likelihood value %q", value)
}

func (what RiskExploitationLikelihood) MarshalJSON() ([]byte, error) {
	return json.Marshal(what.String())
}

func (what *RiskExploitationLikelihood) UnmarshalJSON(data []byte) error {
	var text string
	unmarshalError := json.Unmarshal(data, &text)
	if unmarshalError != nil {
		return unmarshalError
	}

	value, findError := what.Find(text)
	if findError != nil {
		return findError
	}

	*what = value
	return nil
}

func init() {
	yaml.RegisterCustomMarshaler[RiskExploitationLikelihood](func(what RiskExploitationLikelihood) ([]byte, error) {
		return []byte(what.String()), nil
	})

	yaml.RegisterCustomUnmarshaler[RiskExploitationLikelihood](func(what *RiskExploitationLikelihood, data []byte) error {
		value, findError := what.Find(strings.TrimSpace(string(data)))
		if findError != nil {
			return findError
		}

		*what = value
		return nil
	})
}
